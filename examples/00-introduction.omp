; OM File Header - Saved 2023/09/05 21:42:06
; (7.02 :patc (om-make-point 24 23) (om-make-point 253 23) (om-make-point 415 394) "" 183 0 nil "2023/09/05 21:37:55")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "00-introduction" (quote ((let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE" (quote screamer-score) (quote ((om-load-inputfun (quote input-funbox) "voice" "POLY-OBJECT" nil) (om-load-inputfun (quote input-funbox) "screamer-score-domain or list of domains" "DOMAINS" nil) (om-load-inputfun (quote input-funbox) "list of screamer-score-constraints" "SCORE-CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" nil) (om-load-inputfunmenu1 (quote input-funmenu) "t or nil" "RANDOM?" (quote t) (list (list "t" (quote t)) (list "nil" nil))))) (om-make-point 260 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "propagation-variables<lambda-patch>" "P-VARIABLES" nil) (om-load-inputfun (quote input-funbox) "constraint<lambda-patch> or list" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" "one-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (list (quote list) "n-values" 10)) (list "ith-value" (list (quote list) "ith-value" 10)) (list "best-value" "best-value"))) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force"))) (om-make-point 140 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OM-Backtrack" (om-load-patch-abs1 "OM-Backtrack" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 136 230) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEEN" (quote an-integer-between) (quote ((om-load-inputfun (quote input-funbox) "low value" "LOW" 0) (om-load-inputfun (quote input-funbox) "high value" "HIGH" 10))) (om-make-point 102 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 310 421)) (quote nil) (om-make-point 40 120) nil nil nil "OM-Backtrack"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 222 30) (quote "This Tutorial is under construction") "" (om-make-point 83 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))
