; OM File Header - Saved 2024/04/05 12:16:30
; (7.04 :patc (om-make-point 24 23) (om-make-point 253 23) (om-make-point 415 394) "" 183 0 nil "2024/04/05 12:16:27")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "00-introduction" (quote ((let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE" (quote screamer-score) (quote ((om-load-inputfun (quote input-funbox) "voice" "POLY-OBJECT" nil) (om-load-inputfun (quote input-funbox) "screamer-score-domain or list of domains" "DOMAINS" nil) (om-load-inputfun (quote input-funbox) "list of screamer-score-constraints" "SCORE-CONSTRAINTS" nil) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "FORCE-FUNCTION" (quote :force-function) nil nil) (om-load-inputkeyword (quote input-keyword) "t or nil" "RANDOM?" (quote :random?) (quote t) nil) (om-load-inputkeyword (quote input-keyword) "integer" "mcs-approx" (quote :mcs-approx) 2 (list (list "2" 2) (list "4" 4) (list "8" 8) (list "16" 16))))) (om-make-point 260 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputkeyword (quote input-keyword) "propagation-variables<lambda-patch>" "P-VARIABLES" (quote :p-variables) nil nil) (om-load-inputkeyword (quote input-keyword) "constraint<lambda-patch> or list" "CONSTRAINTS" (quote :constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" (quote :p-constraints) nil nil) (om-load-inputkeyword (quote input-keyword) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" (quote :screamer-valuation) "one-value" nil) (om-load-inputkeyword (quote input-keyword) "ordering-force-functions" "FORCE-FUNCTION" (quote :force-function) "static-ordering linear-force" nil) (om-load-inputkeyword (quote input-keyword) "constraints-all<lambda-patch>" "constraints-all" (quote :constraints-all) nil nil) (om-load-inputkeyword (quote input-keyword) "symbol or list" "output" (quote :output) nil nil) (om-load-inputkeyword (quote input-keyword) "symbol t or nil" "count-failures?" (quote :count-failures?) nil (list (list "nil" nil) (list "t" (quote t)))) (om-load-inputkeyword (quote input-keyword) "<lambda-patch>" "objective-form" (quote :objective-form) nil nil))) (om-make-point 140 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "OM-Backtrack" (om-load-patch-abs1 "OM-Backtrack" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 136 230) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEEN" (quote an-integer-between) (quote ((om-load-inputfun (quote input-funbox) "low value" "LOW" 0) (om-load-inputfun (quote input-funbox) "high value" "HIGH" 10))) (om-make-point 102 86) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 310 421)) (quote nil) (om-make-point 40 120) nil nil nil "OM-Backtrack"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 222 30) (quote "This Tutorial is under construction") "" (om-make-point 83 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.04))
