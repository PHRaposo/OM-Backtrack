; OM File Header - Saved 2023/09/05 21:24:24
; (7.02 :patc (om-make-point 17.0D0 80) (om-make-point 485 133) (om-make-point 875 564) "" 183 0 nil "2023/08/18 18:11:13")
; End File Header
; External resources 
; (list (list (quote :abstraction) "#P\"01-backtrack-tut-1.omp\""))
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "02-backtrack-tut-2" (quote ((let ((box (om-load-boxcall (quote patch-box) "01-backtrack-tut-1" (quote ("elements" "OM-Screamer-tutorial-patches" "01-backtrack" "01-backtrack-tut-1")) (quote nil) (om-make-point 45 60) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 375 345) (quote "Since the previous patch contains a$non-deterministic function (and $nothing else to go back to $determinism), it is itself $non-deterministic. This is shown $by the rose question mark, ?$$Try and evaluate the patch with all $the <Screamer valuation>$possibilities : one-value, all-values, and Listener.$$One-value gives the answer directly to the OM-Listener, $the backtracking is hidden and you can use the output like $any output of an OM patch.$$All-values gives all the answers (may take a long time) to $the OM-Listener, the backtracking is hidden and the output$is the list of all answers.$$Listener allows to choose if you want to keep the current $value, or try to go on backtracking. It goes back to the $OM Listener only after you answer no.") "" (om-make-point 218 54) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))
