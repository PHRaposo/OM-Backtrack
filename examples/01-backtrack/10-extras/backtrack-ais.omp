; OM File Header - Saved 2023/07/14 23:30:29
; (7.02 :patc (om-make-point 24 26) (om-make-point 339 151) (om-make-point 547 431) "" 183 0 nil "2023/06/19 17:16:56")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "backtrack-ais" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 367 45) (quote "This patch generates a random all-interval series.$Sometimes it takes a few seconds to show the first result.") "" (om-make-point 166 150) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 125 30) (quote "All-Interval Series") "" (om-make-point 251 16) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 181 91) (quote "Evaluate this patch with Screamer Valuation set to one-value or listener only (see Backtrack preference module).$") "" (om-make-point 237 50) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 98 226) (om-make-point 340 100) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (6900) (7000) (6400) (6200) (7100) (6100) (6800) (6700) (6300) (6600))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 23) 0 1 (quote :normal) (quote t) nil)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "backtrack-AIS" (om-load-patch-abs1 "backtrack-AIS" (quote ((let ((box (om-load-boxcall (quote genfun) "APPLY-CONT" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 221 164) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 161 30) (quote "Conversion to midicents") "" (om-make-point 260 472) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 169 30) (quote "Eleven intervals (mod12)") "" (om-make-point 432 191) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 177 45) (quote "A Russian dolls patch.$Open to see how it's done.") "" (om-make-point 458 21) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcomment "comment" (om-make-point 148 30) (quote "Random transposition") "" (om-make-point 39 114) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12.0D0 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 369/4 29201/105) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD 2" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" 12))) (om-make-point 341/4 33401/105) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 481/4 39281/105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 125 155) (om-make-point 34 30) 11 "11" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 73 153) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-RANDOM" (quote om-random) (quote ((om-load-inputfun (quote input-funbox) "min" "LOW" 0) (om-load-inputfun (quote input-funbox) "max" "HIGH" 1))) (om-make-point 81 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DX->X" (quote dx->x) (quote ((om-load-inputfun (quote input-funbox) "a number" "START" 0) (om-load-inputfun (quote input-funbox) "a list of numbers" "LIST" (list 1 1)))) (om-make-point 167 262) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-diff" (om-load-patch-abs1 "all-diff" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 188 1339/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 785/4 719/70) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 190 103) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 441 302)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 197 521/6) nil (list nil) "l" "all-diff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X->DX" (quote x->dx) (quote ((om-load-inputfun (quote input-funbox) "a list of numbers" "SELF" (list 0 1)))) (om-make-point 1573/4 9251/105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 1469/4 19541/105) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MOD" (quote mod) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "Y" "Y" 12))) (om-make-point 1329/4 13661/105) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 1357/4 9461/105) (om-make-point 34 30) 12 "12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "all-diff-pcs" (om-load-patch-abs1 "all-diff-pcs" (quote ((let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6-7-8-9-10-11" (om-load-patch-abs1 "1-2-3-4-5-6-7-8-9-10-11" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 168 48) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6-7-8-9-10" (om-load-patch-abs1 "1-2-3-4-5-6-7-8-9-10" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 211/3 449) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 1631/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 1966/21 222) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 1126/21 361) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 3100/21 117) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6-7-8-9" (om-load-patch-abs1 "1-2-3-4-5-6-7-8-9" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 176 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 487/3 46) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6-7-8" (om-load-patch-abs1 "1-2-3-4-5-6-7-8" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 172 75) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 475/3 30) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6-7" (om-load-patch-abs1 "1-2-3-4-5-6-7" (quote ((let ((box (om-load-boxcall (quote undefined) "undefined" (quote undefined) (quote nil) (om-make-point 17 0) (om-make-point 66 18) nil nil nil 0))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 192 95) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 535/3 50) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5-6" (om-load-patch-abs1 "1-2-3-4-5-6" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 191 63) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 532/3 13) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4-5" (om-load-patch-abs1 "1-2-3-4-5" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 201 94) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 562/3 44) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3-4" (om-load-patch-abs1 "1-2-3-4" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 180 71) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 499/3 21) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2-3" (om-load-patch-abs1 "1-2-3" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 200 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 529/3 40) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "1-2" (om-load-patch-abs1 "1-2" (quote ((let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 204 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 535/3 37) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 141 3461/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 361/3 256) (om-make-point 37 30) (list 0) "(0)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 631/3 213) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 349/3 457) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 466/3 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 70 2207/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 2 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (3 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 681/7 1441/7) nil (list (list 0 9)) nil "1-2"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 142 3389/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 634/3 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 352/3 445) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 472/3 306) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 72 2135/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 548/7 1084/7) (om-make-point 72 67) (list (list 0 8 3)) nil "1-2-3"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 134 3155/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 610/3 162) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 328/3 406) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 448/3 267) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 64 1901/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 527/7 1469/7) (om-make-point 96 67) (list (list 0 11 7 8)) nil "1-2-3-4"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 140 3521/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 628/3 223) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 346/3 467) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 466/3 328) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 70 2267/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 534/7 979/7) nil (list (list 0 5 9 7 4)) nil "1-2-3-4-5"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 127 3071/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 589/3 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 307/3 392) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 427/3 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 57 1817/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 653/7 1182/7) nil (list (list 0 11 8 7 2 5)) nil "1-2-3-4-5-6"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 125 3209/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 583/3 171) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 301/3 415) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 421/3 276) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 55 1955/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (6 0 4 0 nil 0) (1 0 5 0 nil 0) (8 0 6 0 nil 0) (7 0 6 1 nil 0) (3 0 7 0 nil 0) (5 0 7 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 401/7 1224/7) nil nil nil "1-2-3-4-5-6-7"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 119 3227/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 565/3 174) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 283/3 418) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 403/3 279) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 49 1973/6) nil nil "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 201 202) (om-make-point 500 400)) (quote nil) (om-make-point 359/7 1294/7) nil (list (list 0 4 5 8 7 3 10 1)) nil "1-2-3-4-5-6-7-8"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 124 3287/6) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 580/3 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 298/3 428) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 418/3 289) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 54 2033/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0) (7 0 5 0 nil 0) (6 0 5 1 nil 0) (2 0 6 0 nil 0) (4 0 6 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 11 832/7) nil (list (list 0 2 1 10 4 5 7 3 9)) nil "1-2-3-4-5-6-7-8-9"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 2701/21 12) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PERMUT-RANDOM" (quote permut-random) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil))) (om-make-point 996/7 50) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (5 0 2 0 nil 0) (4 0 2 1 nil 0) (1 0 3 0 nil 0) (2 0 3 1 nil 0) (7 0 4 0 nil 0) (6 0 7 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 382 544)) (quote nil) (om-make-point 4654/147 31487/294) nil (list (list 0 1 2 10 3 8 7 9 4 5)) nil "1-2-3-4-5-6-7-8-9-10"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 1807/21 2848/7) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 1271/6) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 382/3 229) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 286/3 301) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 469/3 0) (om-make-point 149 30) (list 1 2 3 4 5 7 8 9 10 11) "(1 2 3 4 5 7 8 9 10 11)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "A-MEMBER-OF 2" (quote a-member-of) (quote ((om-load-inputfun (quote input-funbox) "list of possible values" "LIST" (quote a)))) (om-make-point 532/3 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((6 0 0 0 nil 0) (5 0 2 0 nil 0) (1 0 4 0 nil 0) (7 0 4 1 nil 0) (3 0 5 0 nil 0) (4 0 5 1 nil 0) (0 0 7 0 nil 0))) 7.02 nil "" (om-make-point 200 99) (om-make-point 387 564)) (quote nil) (om-make-point 3520/147 8345/294) nil (list (list 0 3 11 2 5 10 7 1 4 8 9)) nil "1-2-3-4-5-6-7-8-9-10-11"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 852/7 358) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "alldiff 2" (om-load-patch-abs1 "alldiff" (quote ((let ((box (om-load-boxcall (quote genfun) "ALLDIFF?" (quote alldiff?) (quote ((om-load-inputfun (quote input-funbox) "a list" "L" nil))) (om-make-point 145 118) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 143 255) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 151 16) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 50 6455/42) nil (list nil) "l" "alldiff"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "X-APPEND" (quote x-append) (quote ((om-load-inputfun (quote input-funbox) "first element" "L1?" nil) (om-load-inputfun (quote input-funbox) "second element" "L2?" nil))) (om-make-point 406/3 727/7) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONT 2" (quote apply-cont) (quote ((om-load-inputfun (quote input-funbox) "List of constraints in lambda-mode" "FUNS" nil) (om-load-inputfun (quote input-funbox) "Variables" "VAR" nil))) (om-make-point 286/3 1700/7) (om-make-point 89 75) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 628/3 50) (om-make-point 37 30) (list 6) "(6)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 3 0 nil 0) (5 0 3 1 nil 0) (2 0 4 0 nil 0) (3 0 4 1 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 343 468)) (quote nil) (om-make-point 13424/35 1553/210) nil (list (list 0 3 5 2 8 7 4 10 11 9 1 6)) nil "all-diff-pcs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 500)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 162 519) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000))) :lonset (quote (0 1000)) :ldur (quote ((1000))) :lvel (quote ((100))) :loffset (quote ((0))) :lchan (quote ((1))) :legato 0)))) (load-port-info newobj (quote ((0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 8 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :fluidsynth) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 182 388) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 161 424) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 203 442) (om-make-point 48 30) 6000 "6000" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM+" (quote om+) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 0))) (om-make-point 176 477) (om-make-point 32 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 151 608) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((12 0 0 0 nil 0) (14 0 0 1 nil 0) (5 0 6 1 nil 0) (6 0 7 0 nil 0) (11 0 7 1 nil 0) (9 0 10 0 nil 0) (8 0 10 1 nil 0) (10 0 11 0 nil 0) (0 0 11 1 nil 0) (17 0 13 0 nil 0) (15 0 14 0 nil 0) (13 0 14 1 nil 0) (16 0 15 1 nil 0) (22 0 18 1 nil 0) (7 0 20 0 nil 0) (19 0 20 1 nil 0) (20 0 22 0 nil 0) (21 0 22 1 nil 0) (18 0 23 0 nil 0))) 7.02 nil "" (om-make-point 518 23) (om-make-point 676 666)) (quote nil) (om-make-point 95 54) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000) (6500) (6900) (7000) (6400) (6200) (7100) (6100) (6800) (6700) (6300) (6600))) :lonset (quote (0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6500)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 7.02 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil "backtrack-AIS"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 3 0 nil 0))) nil 7.02))
