; OM File Header - Saved 2024/04/05 11:37:19
; (7.04 :patc (om-make-point 35 189) (om-make-point 50 50) (om-make-point 398 400) "" 183 0 "2024/04/05 11:25:51" "2024/04/05 11:37:02")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "nondeterministic-lisp-functions" (quote ((let ((box (om-load-boxcall (quote abstraction) "a-partition-of" (om-load-patch-abs1 "a-partition-of" (quote ((let ((box (om-load-boxcall (quote lispfun) "A-PARTITION-OF" (quote screamer+::a-partition-of) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 63 113) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 87 208) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 90 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (0 0 1 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 314 384)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 219 114) nil (list (list (list (list 0) (list 1) (list 2) (list 3) (list 4) (list 5)) (list (list 0 1) (list 2) (list 3) (list 4) (list 5)) (list (list 0 2) (list 1) (list 3) (list 4) (list 5)) (list (list 0 3) (list 1) (list 2) (list 4) (list 5)) (list (list 0 4) (list 1) (list 2) (list 3) (list 5)) (list (list 0 5) (list 1) (list 2) (list 3) (list 4)) (list (list 0) (list 1 2) (list 3) (list 4) (list 5)) (list (list 0 1 2) (list 3) (list 4) (list 5)) (list (list 0 3) (list 1 2) (list 4) (list 5)) (list (list 0 4) (list 1 2) (list 3) (list 5)) (list (list 0 5) (list 1 2) (list 3) (list 4)) (list (list 0) (list 1 3) (list 2) (list 4) (list 5)) (list (list 0 1 3) (list 2) (list 4) (list 5)) (list (list 0 2) (list 1 3) (list 4) (list 5)) (list (list 0 4) (list 1 3) (list 2) (list 5)) (list (list 0 5) (list 1 3) (list 2) (list 4)) (list (list 0) (list 1 4) (list 2) (list 3) (list 5)) (list (list 0 1 4) (list 2) (list 3) (list 5)) (list (list 0 2) (list 1 4) (list 3) (list 5)) (list (list 0 3) (list 1 4) (list 2) (list 5)) (list (list 0 5) (list 1 4) (list 2) (list 3)) (list (list 0) (list 1 5) (list 2) (list 3) (list 4)) (list (list 0 1 5) (list 2) (list 3) (list 4)) (list (list 0 2) (list 1 5) (list 3) (list 4)) (list (list 0 3) (list 1 5) (list 2) (list 4)) (list (list 0 4) (list 1 5) (list 2) (list 3)) (list (list 0) (list 1) (list 2 3) (list 4) (list 5)) (list (list 0 1) (list 2 3) (list 4) (list 5)) (list (list 0 2 3) (list 1) (list 4) (list 5)) (list (list 0 4) (list 1) (list 2 3) (list 5)) (list (list 0 5) (list 1) (list 2 3) (list 4)) (list (list 0) (list 1 2 3) (list 4) (list 5)) (list (list 0 1 2 3) (list 4) (list 5)) (list (list 0 4) (list 1 2 3) (list 5)) (list (list 0 5) (list 1 2 3) (list 4)) (list (list 0) (list 1 4) (list 2 3) (list 5)) (list (list 0 1 4) (list 2 3) (list 5)) (list (list 0 2 3) (list 1 4) (list 5)) (list (list 0 5) (list 1 4) (list 2 3)) (list (list 0) (list 1 5) (list 2 3) (list 4)) (list (list 0 1 5) (list 2 3) (list 4)) (list (list 0 2 3) (list 1 5) (list 4)) (list (list 0 4) (list 1 5) (list 2 3)) (list (list 0) (list 1) (list 2 4) (list 3) (list 5)) (list (list 0 1) (list 2 4) (list 3) (list 5)) (list (list 0 2 4) (list 1) (list 3) (list 5)) (list (list 0 3) (list 1) (list 2 4) (list 5)) (list (list 0 5) (list 1) (list 2 4) (list 3)) (list (list 0) (list 1 2 4) (list 3) (list 5)) (list (list 0 1 2 4) (list 3) (list 5)) (list (list 0 3) (list 1 2 4) (list 5)) (list (list 0 5) (list 1 2 4) (list 3)) (list (list 0) (list 1 3) (list 2 4) (list 5)) (list (list 0 1 3) (list 2 4) (list 5)) (list (list 0 2 4) (list 1 3) (list 5)) (list (list 0 5) (list 1 3) (list 2 4)) (list (list 0) (list 1 5) (list 2 4) (list 3)) (list (list 0 1 5) (list 2 4) (list 3)) (list (list 0 2 4) (list 1 5) (list 3)) (list (list 0 3) (list 1 5) (list 2 4)) (list (list 0) (list 1) (list 2 5) (list 3) (list 4)) (list (list 0 1) (list 2 5) (list 3) (list 4)) (list (list 0 2 5) (list 1) (list 3) (list 4)) (list (list 0 3) (list 1) (list 2 5) (list 4)) (list (list 0 4) (list 1) (list 2 5) (list 3)) (list (list 0) (list 1 2 5) (list 3) (list 4)) (list (list 0 1 2 5) (list 3) (list 4)) (list (list 0 3) (list 1 2 5) (list 4)) (list (list 0 4) (list 1 2 5) (list 3)) (list (list 0) (list 1 3) (list 2 5) (list 4)) (list (list 0 1 3) (list 2 5) (list 4)) (list (list 0 2 5) (list 1 3) (list 4)) (list (list 0 4) (list 1 3) (list 2 5)) (list (list 0) (list 1 4) (list 2 5) (list 3)) (list (list 0 1 4) (list 2 5) (list 3)) (list (list 0 2 5) (list 1 4) (list 3)) (list (list 0 3) (list 1 4) (list 2 5)) (list (list 0) (list 1) (list 2) (list 3 4) (list 5)) (list (list 0 1) (list 2) (list 3 4) (list 5)) (list (list 0 2) (list 1) (list 3 4) (list 5)) (list (list 0 3 4) (list 1) (list 2) (list 5)) (list (list 0 5) (list 1) (list 2) (list 3 4)) (list (list 0) (list 1 2) (list 3 4) (list 5)) (list (list 0 1 2) (list 3 4) (list 5)) (list (list 0 3 4) (list 1 2) (list 5)) (list (list 0 5) (list 1 2) (list 3 4)) (list (list 0) (list 1 3 4) (list 2) (list 5)) (list (list 0 1 3 4) (list 2) (list 5)) (list (list 0 2) (list 1 3 4) (list 5)) (list (list 0 5) (list 1 3 4) (list 2)) (list (list 0) (list 1 5) (list 2) (list 3 4)) (list (list 0 1 5) (list 2) (list 3 4)) (list (list 0 2) (list 1 5) (list 3 4)) (list (list 0 3 4) (list 1 5) (list 2)) (list (list 0) (list 1) (list 2 3 4) (list 5)) (list (list 0 1) (list 2 3 4) (list 5)) (list (list 0 2 3 4) (list 1) (list 5)) (list (list 0 5) (list 1) (list 2 3 4)) (list (list 0) (list 1 2 3 4) (list 5)) (list (list 0 1 2 3 4) (list 5)) (list (list 0 5) (list 1 2 3 4)) (list (list 0) (list 1 5) (list 2 3 4)) (list (list 0 1 5) (list 2 3 4)) (list (list 0 2 3 4) (list 1 5)) (list (list 0) (list 1) (list 2 5) (list 3 4)) (list (list 0 1) (list 2 5) (list 3 4)) (list (list 0 2 5) (list 1) (list 3 4)) (list (list 0 3 4) (list 1) (list 2 5)) (list (list 0) (list 1 2 5) (list 3 4)) (list (list 0 1 2 5) (list 3 4)) (list (list 0 3 4) (list 1 2 5)) (list (list 0) (list 1 3 4) (list 2 5)) (list (list 0 1 3 4) (list 2 5)) (list (list 0 2 5) (list 1 3 4)) (list (list 0) (list 1) (list 2) (list 3 5) (list 4)) (list (list 0 1) (list 2) (list 3 5) (list 4)) (list (list 0 2) (list 1) (list 3 5) (list 4)) (list (list 0 3 5) (list 1) (list 2) (list 4)) (list (list 0 4) (list 1) (list 2) (list 3 5)) (list (list 0) (list 1 2) (list 3 5) (list 4)) (list (list 0 1 2) (list 3 5) (list 4)) (list (list 0 3 5) (list 1 2) (list 4)) (list (list 0 4) (list 1 2) (list 3 5)) (list (list 0) (list 1 3 5) (list 2) (list 4)) (list (list 0 1 3 5) (list 2) (list 4)) (list (list 0 2) (list 1 3 5) (list 4)) (list (list 0 4) (list 1 3 5) (list 2)) (list (list 0) (list 1 4) (list 2) (list 3 5)) (list (list 0 1 4) (list 2) (list 3 5)) (list (list 0 2) (list 1 4) (list 3 5)) (list (list 0 3 5) (list 1 4) (list 2)) (list (list 0) (list 1) (list 2 3 5) (list 4)) (list (list 0 1) (list 2 3 5) (list 4)) (list (list 0 2 3 5) (list 1) (list 4)) (list (list 0 4) (list 1) (list 2 3 5)) (list (list 0) (list 1 2 3 5) (list 4)) (list (list 0 1 2 3 5) (list 4)) (list (list 0 4) (list 1 2 3 5)) (list (list 0) (list 1 4) (list 2 3 5)) (list (list 0 1 4) (list 2 3 5)) (list (list 0 2 3 5) (list 1 4)) (list (list 0) (list 1) (list 2 4) (list 3 5)) (list (list 0 1) (list 2 4) (list 3 5)) (list (list 0 2 4) (list 1) (list 3 5)) (list (list 0 3 5) (list 1) (list 2 4)) (list (list 0) (list 1 2 4) (list 3 5)) (list (list 0 1 2 4) (list 3 5)) (list (list 0 3 5) (list 1 2 4)) (list (list 0) (list 1 3 5) (list 2 4)) (list (list 0 1 3 5) (list 2 4)) (list (list 0 2 4) (list 1 3 5)) (list (list 0) (list 1) (list 2) (list 3) (list 4 5)) (list (list 0 1) (list 2) (list 3) (list 4 5)) (list (list 0 2) (list 1) (list 3) (list 4 5)) (list (list 0 3) (list 1) (list 2) (list 4 5)) (list (list 0 4 5) (list 1) (list 2) (list 3)) (list (list 0) (list 1 2) (list 3) (list 4 5)) (list (list 0 1 2) (list 3) (list 4 5)) (list (list 0 3) (list 1 2) (list 4 5)) (list (list 0 4 5) (list 1 2) (list 3)) (list (list 0) (list 1 3) (list 2) (list 4 5)) (list (list 0 1 3) (list 2) (list 4 5)) (list (list 0 2) (list 1 3) (list 4 5)) (list (list 0 4 5) (list 1 3) (list 2)) (list (list 0) (list 1 4 5) (list 2) (list 3)) (list (list 0 1 4 5) (list 2) (list 3)) (list (list 0 2) (list 1 4 5) (list 3)) (list (list 0 3) (list 1 4 5) (list 2)) (list (list 0) (list 1) (list 2 3) (list 4 5)) (list (list 0 1) (list 2 3) (list 4 5)) (list (list 0 2 3) (list 1) (list 4 5)) (list (list 0 4 5) (list 1) (list 2 3)) (list (list 0) (list 1 2 3) (list 4 5)) (list (list 0 1 2 3) (list 4 5)) (list (list 0 4 5) (list 1 2 3)) (list (list 0) (list 1 4 5) (list 2 3)) (list (list 0 1 4 5) (list 2 3)) (list (list 0 2 3) (list 1 4 5)) (list (list 0) (list 1) (list 2 4 5) (list 3)) (list (list 0 1) (list 2 4 5) (list 3)) (list (list 0 2 4 5) (list 1) (list 3)) (list (list 0 3) (list 1) (list 2 4 5)) (list (list 0) (list 1 2 4 5) (list 3)) (list (list 0 1 2 4 5) (list 3)) (list (list 0 3) (list 1 2 4 5)) (list (list 0) (list 1 3) (list 2 4 5)) (list (list 0 1 3) (list 2 4 5)) (list (list 0 2 4 5) (list 1 3)) (list (list 0) (list 1) (list 2) (list 3 4 5)) (list (list 0 1) (list 2) (list 3 4 5)) (list (list 0 2) (list 1) (list 3 4 5)) (list (list 0 3 4 5) (list 1) (list 2)) (list (list 0) (list 1 2) (list 3 4 5)) (list (list 0 1 2) (list 3 4 5)) (list (list 0 3 4 5) (list 1 2)) (list (list 0) (list 1 3 4 5) (list 2)) (list (list 0 1 3 4 5) (list 2)) (list (list 0 2) (list 1 3 4 5)) (list (list 0) (list 1) (list 2 3 4 5)) (list (list 0 1) (list 2 3 4 5)) (list (list 0 2 3 4 5) (list 1)) (list (list 0) (list 1 2 3 4 5)) (list (list 0 1 2 3 4 5)))) nil "a-partition-of"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 216 51) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "a-subset-of" (om-load-patch-abs1 "a-subset-of" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 87 208) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 90 7) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "A-SUBSET-OF" (quote screamer+::a-subset-of) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 73 115) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 0 0 nil 0) (1 0 2 0 nil 0))) 7.04 nil "" (om-make-point 200 200) (om-make-point 226 326)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 66 113) nil (list (list 3 4 5)) nil "a-subset-of"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 58 50) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((1 0 0 0 nil 0) (3 0 2 0 nil 0))) nil 7.04))
