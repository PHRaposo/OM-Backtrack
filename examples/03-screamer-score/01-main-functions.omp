; OM File Header - Saved 2023/09/05 21:42:06
; (7.02 :patc (om-make-point 19 14) (om-make-point 219 50) (om-make-point 683 546) "" 183 0 "2023/08/28 10:03:21" "2023/09/05 21:20:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-main-functions" (quote ((let ((box (om-load-boxcall (quote genfun) "CONTAIN-RESTS?" (quote contain-rests?) (quote ((om-load-inputfun (quote input-funbox) "domain-list" "DOMAIN-LIST" (list 6000 nil nil (list (quote screamer:an-integerv)))))) (om-make-point 519 208) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONTAIN-VARIABLES?" (quote contain-variables?) (quote ((om-load-inputfun (quote input-funbox) "domain-list" "DOMAIN-LIST" (list 6000 nil nil (list (quote screamer:an-integerv)))))) (om-make-point 507 94) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-PROFILE" (quote constraint-profile) (quote ((om-load-inputfun (quote input-funbox) "bpf or bpf-lib" "BPF-OBJECT" nil) (om-load-inputfun (quote input-funbox) "number or list of voice numbers" "VOICES" (list 0)) (om-load-inputfun (quote input-funbox) "midics" "APPROX" 400) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RANGE" "voice-range" (list (list "voice-range" "voice-range") (list "all" "all"))))) (om-make-point 352 251) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-HARMONY" (quote constraint-harmony) (quote ((om-load-inputfun (quote input-funbox) "<lambda-patch>" "CONSTRAINT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "constraint-mode" "CONSTRAINT-MODE" "list" (list (list "list" "list") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfunmenu1 (quote input-funmenu) "input-mode" "INPUT-MODE" "all-voices" (list (list "all-voices" "all-voices") (list "voices-list" "voices-list"))))) (om-make-point 344 141) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-ONE-VOICE 2" (quote constraint-one-voice) (quote ((om-load-inputfun (quote input-funbox) "<lambda-patch>" "CONSTRAINT" nil) (om-load-inputfunmenu1 (quote input-funmenu) "list" "CONSTRAINT-MODE" "list" (list (list "list" "list") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list-of-voice-numbers" "VOICES" (list 0 1)) (om-load-inputfunmenu1 (quote input-funmenu) "string" "DOMAIN" "pitch" (list (list "pitch" "pitch") (list "pitch+dur" "pitch+dur") (list "pitch+onset" "pitch+onset") (list "pitch+dur+onset" "pitch+dur+onset"))))) (om-make-point 341 49) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CONSTRAINT-MEASURE" (quote constraint-measure) (quote ((om-load-inputfun (quote input-funbox) "screamer-score-constraints or list of constraints" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "measure number or list of numbers" "MEASURE-NUMBER" 0))) (om-make-point 347 359) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE-DOMAIN" (quote screamer-score-domain) (quote ((om-load-inputfun (quote input-funbox) "midics-list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)) (om-load-inputfunmenu1 (quote input-funmenu) "domain-type" "TYPE" "notes" (list (list "notes" "notes") (list "chords" "chords"))))) (om-make-point 150 152) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SCORE" (quote screamer-score) (quote ((om-load-inputfun (quote input-funbox) "voice" "POLY-OBJECT" nil) (om-load-inputfun (quote input-funbox) "screamer-score-domain or list of domains" "DOMAINS" nil) (om-load-inputfun (quote input-funbox) "list of screamer-score-constraints" "SCORE-CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force") (om-load-inputfunmenu1 (quote input-funmenu) "t or nil" "RANDOM?" (quote t) (list (list "t" (quote t)) (list "nil" nil))))) (om-make-point 21 153) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))
