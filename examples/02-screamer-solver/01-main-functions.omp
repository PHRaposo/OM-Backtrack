; OM File Header - Saved 2023/07/03 17:23:30
; (7.02 :patc (om-make-point 30 33) (om-make-point 50 50) (om-make-point 705 437) "" 183 0 "2023/07/02 22:42:31" "2023/07/03 17:07:17")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-main-functions" (quote ((let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "propagation-variables<lambda-patch>" "P-VARIABLES" nil) (om-load-inputfun (quote input-funbox) "constraint<lambda-patch> or list" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "one-value, all-values, listener, n-values or ith-value" "SCREAMER-VALUATION" "one-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (quote (list "n-values" 10))) (list "ith-value" (quote (list "ith-value" 10))))) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force"))) (om-make-point 322 313) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONTV" (quote om-screamer::apply-contv) (quote ((om-load-inputfun (quote input-funbox) "patch in lambda mode" "CS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "string" "MODE" "atom" (list (list "atom" "atom") (list "list" "list"))) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RECURSIVE?" "off" (list (list "off" "off") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list of variables" "VARS" nil))) (om-make-point 242 191) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-CHORDS-INV" (quote list-of-chords-inv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-CHORDS" (list 3 4 3)) (om-load-inputfun (quote input-funbox) "list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)))) (om-make-point 125 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-LISTS-OFV" (quote list-of-lists-ofv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-VARS" (list 3 4 3)) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-below" "a-real-below") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 29 188) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))))) (om-make-point 410 198) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 5 nil 0))) nil 7.02))
