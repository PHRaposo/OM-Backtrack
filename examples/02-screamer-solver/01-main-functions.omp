; OM File Header - Saved 2023/07/15 09:30:09
; (7.02 :patc (om-make-point 30 33) (om-make-point 50 50) (om-make-point 801 468) "" 183 0 "2023/07/02 22:42:31" "2023/07/15 09:29:55")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "01-main-functions" (quote ((let ((box (om-load-boxcall (quote genfun) "SC-SUBSETS" (quote om-screamer::sc-subsets) (quote ((om-load-inputfun (quote input-funbox) "fn symbol" "FN" (quote |6-27A|)))) (om-make-point 690 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB/SUPERSETS" (quote om-screamer::sub/supersets) (quote ((om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)) (om-load-inputfun (quote input-funbox) "card" "CARD" 9))) (om-make-point 681 137) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-INFO" (quote om-screamer::sc-info) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "mode" "MODE" (quote :prime) (list (list "prime" (quote :prime)) (list "icv" (quote :icv)) (list "member-sets" (quote :member-sets)) (list "complement-pcs" (quote :complement-pcs)))) (om-load-inputfun (quote input-funbox) "SC" "SC" (quote |4-Z15A|)))) (om-make-point 609 231) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCS-CARD" (quote om-screamer::scs-card) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "integer" "CARD" 6 (list (list "1" 1) (list "2" 2) (list "3" 3) (list "4" 4) (list "5" 5) (list "6" 6) (list "7" 7) (list "8" 8) (list "9" 9) (list "10" 10) (list "11" 11) (list "12" 12))))) (om-make-point 606 135) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC+OFF" (quote om-screamer::sc+off) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 530 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SC-NAME" (quote om-screamer::sc-name) (quote ((om-load-inputfun (quote input-funbox) "midics" "MIDICS" (list 6000 6100)))) (om-make-point 525 136) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-SCV?" (quote om-screamer::member-of-scv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "list of set-classes<fn>" "SC-LIST" (list 0 4 7)) (om-load-inputfunmenu1 (quote input-funmenu) "pcs or midics" "MODE" "pcs" (list (list "pcs" "pcs") (list "midics" "midics"))))) (om-make-point 677 36) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SUB-SETPV?" (quote om-screamer::sub-setpv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables => (integers-betweenv 0 11)" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "fn or integers" "PC-SET" (quote |6-27A|)))) (om-make-point 600 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "PC-SETPV?" (quote om-screamer::pc-setpv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables => (integers-betweenv 0 11)" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "fn or integers" "PC-SET" (quote |3-11B|)))) (om-make-point 524 34) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OFVS" (quote list-ofvs) (quote ((om-load-inputfun (quote input-funbox) "integer" "N-VARS" 3) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 149 180) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-VARIABLE" (quote screamer-variable) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VAR" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-belowv" "a-real-belowv") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 18 177) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-DOC" (quote screamer-doc) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "package::function-name" "FUNCTION" "solution" (list (list "solution" "solution") (list "static-ordering" "static-ordering") (list "reorder" "reorder") (list "linear-force" "linear-force") (list "divide-and-conquer-force" "divide-and-conquer-force") (list "domain-size" "domain-size") (list "range-size" "range-size"))))) (om-make-point 305 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "propagation-variables<lambda-patch>" "P-VARIABLES" nil) (om-load-inputfun (quote input-funbox) "constraint<lambda-patch> or list" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" "one-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (list (quote list) "n-values" 10)) (list "ith-value" (list (quote list) "ith-value" 10)) (list "best-value" "best-value"))) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force"))) (om-make-point 66 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONTV" (quote om-screamer::apply-contv) (quote ((om-load-inputfun (quote input-funbox) "patch in lambda mode" "CS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "string" "MODE" "atom" (list (list "atom" "atom") (list "list" "list"))) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RECURSIVE?" "off" (list (list "off" "off") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list of variables" "VARS" nil))) (om-make-point 306 178) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-CHORDS-INV" (quote list-of-chords-inv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-CHORDS" (list 3 4 3)) (om-load-inputfun (quote input-funbox) "list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)))) (om-make-point 121 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-LISTS-OFV" (quote list-of-lists-ofv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-VARS" (list 3 4 3)) (om-load-inputfunmenu1 (quote input-funmenu) "screamer-variable" "VARIABLES" "an-integer-betweenv" (list (list "an-integer-betweenv" "an-integer-betweenv") (list "a-member-ofv" "a-member-ofv") (list "a-random-member-ofv" "a-random-member-ofv") (list "an-integerv" "an-integerv") (list "an-integer-abovev" "an-integer-abovev") (list "an-integer-belowv" "an-integer-belowv") (list "a-realv" "a-realv") (list "a-real-abovev" "a-real-abovev") (list "a-real-below" "a-real-below") (list "a-real-betweenv" "a-real-betweenv") (list "a-numberv" "a-numberv") (list "a-booleanv" "a-booleanv"))))) (om-make-point 27 277) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))))) (om-make-point 186 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote nil) nil 7.02))
