; OM File Header - Saved 2023/07/15 09:29:53
; (7.02 :patc (om-make-point 78 513) (om-make-point 50 50) (om-make-point 674 547) "" 183 0 "2023/07/15 09:27:32" "2023/07/15 09:28:41")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "set-class" (quote ((let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 378 105) (om-make-point 99 30) (list (quote |3-11A|) (quote |3-11B|)) "(3-11a 3-11b)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 74 90) (om-make-point 27 30) 3 "3" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 31 90) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 67.5)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 172 82) (om-make-point 177 118) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600) (3700) (3800) (3900) (4000) (4100) (4200) (4300) (4400) (4500) (4600) (4700) (4800) (4900) (5000) (5100) (5200) (5300) (5400) (5500) (5600) (5700) (5800) (5900) (6000) (6100) (6200) (6300) (6400) (6500) (6600) (6700) (6800) (6900) (7000) (7100) (7200))) :lonset (quote (0 68 135 202 270 338 405 472 540 608 675 742 810 878 945 1012 1080 1148 1215 1282 1350 1418 1485 1552 1620 1688 1755 1822 1890 1958 2025 2092 2160 2228 2295 2362 2430 3430)) :ldur (quote ((1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000) (1000))) :lvel (quote ((100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100) (100))) :loffset (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0))) :lchan (quote ((1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1) (1))) :legato 0)))) (load-port-info newobj (quote ((0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 414 239) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "growing-bass 2" (om-load-patch-abs1 "growing-bass" (quote ((let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 97 64) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 121 121) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 119 258) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "input" 0 (om-make-point 137 6) "" nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ALL-ASCENDINGV" (quote om-screamer::all-ascendingv) (quote ((om-load-inputfun (quote input-funbox) "VAR-LIST" "VAR-LIST" nil))) (om-make-point 99 185) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((0 0 1 0 nil 0) (3 0 1 1 nil 0) (4 0 2 0 nil 0) (1 0 4 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 943/2 136) nil (list nil) "l" "growing-bass"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "reorder" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))) (om-load-inputfunmenu1 (quote input-funmenu) "domain-size or range-size" "COST-FUNCTION" "domain-size" (list (list "domain-size" "domain-size") (list "range-size" "range-size"))) (om-load-inputfunmenu1 (quote input-funmenu) "terminate-function" "TERMINATE?" "(declare (ignore x))" (list (list "(declare (ignore x))" "(declare (ignore x))") (list "(< x 1e-6)" "(< x 1e-6)"))) (om-load-inputfunmenu1 (quote input-funmenu) "> or <" "ORDER" "<" (list (list ">" ">") (list "<" "<"))) (om-load-inputfunmenu1 (quote input-funmenu) "linear-force or divide-and-conquer-force" "REORDER-FORCE-FUNCTION" "linear-force" (list (list "linear-force" "linear-force") (list "divide-and-conquer-force" "divide-and-conquer-force"))))) (om-make-point 535 215) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CREATE-LIST" (quote create-list) (quote ((om-load-inputfun (quote input-funbox) "number of elements" "COUNT" 10) (om-load-inputfun (quote input-funbox) "initial element" "ELEM" 3))) (om-make-point 34 124) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LIST-OF-CHORDS-INV" (quote list-of-chords-inv) (quote ((om-load-inputfun (quote input-funbox) "list" "N-CHORDS" (list 3)) (om-load-inputfun (quote input-funbox) "list" "DOMAIN" (list 6000 6200 6400 6500 6700 6900 7100 7200)) (om-load-inputfunmenu1 (quote input-funmenu) "t or nil" "RANDOM?" (quote t) (list (list "nil" nil) (list "t" (quote (quote t))))))) (om-make-point 58 206) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ARITHM-SER" (quote arithm-ser) (quote ((om-load-inputfun (quote input-funbox) "begin" "BEGIN" 3600) (om-load-inputfun (quote input-funbox) "end " "END" 7200) (om-load-inputfun (quote input-funbox) "step" "STEP" 100))) (om-make-point 104 10) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "member-of-scs" (om-load-patch-abs1 "member-of-scs" (quote ((let ((box (om-load-boxin "sc-list" 1 (om-make-point 193 38) "" "sc-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "APPLY-CONTV 2" (quote om-screamer::apply-contv) (quote ((om-load-inputfun (quote input-funbox) "patch in lambda mode" "CS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "string" "MODE" "list" (list (list "atom" "atom") (list "list" "list"))) (om-load-inputfunmenu1 (quote input-funmenu) "string" "RECURSIVE?" "off" (list (list "off" "off") (list "n-inputs" "n-inputs") (list "car-cdr" "car-cdr"))) (om-load-inputfun (quote input-funbox) "list of variables" "VARS" nil))) (om-make-point 209 210) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "member-of-sc-list" (om-load-patch-abs1 "member-of-sc-list" (quote ((let ((box (om-load-boxin "sc-list" 1 (om-make-point 322 4) "" "sc-list" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MEMBER-OF-SCV?" (quote om-screamer::member-of-scv?) (quote ((om-load-inputfun (quote input-funbox) "list of screamer variables" "VARS" (list nil)) (om-load-inputfun (quote input-funbox) "list of set-classes<fn>" "SC-LIST" (list 0 4 7)) (om-load-inputfunmenu1 (quote input-funmenu) "pcs or midics" "MODE" "midics" (list (list "pcs" "pcs") (list "midics" "midics"))))) (om-make-point 210 123) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 220 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 219 288) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vars" 0 (om-make-point 170 13) "" "vars" nil (om-make-point 48 59)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (1 0 2 0 nil 0) (2 0 3 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "list" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 419/3 117) nil (list nil) "l" "member-of-sc-list"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 239 323) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "list-of-lists-of-variables" 0 (om-make-point 289 115) "" "list-of-lists-of-variables" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((2 0 1 0 nil 0) (4 0 1 3 nil 0) (0 0 2 1 nil 0) (1 0 3 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "list-of-lists-of-variables" nil) (om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 1455/4 2883/20) nil (list nil) "l" "member-of-scs"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "propagation-variables<lambda-patch>" "P-VARIABLES" nil) (om-load-inputfun (quote input-funbox) "constraint<lambda-patch> or list" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" "one-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (list (quote list) "n-values" 10)) (list "ith-value" (list (quote list) "ith-value" 10)) (list "best-value" "best-value"))) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force"))) (om-make-point 367 303) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 112 398) (om-make-point 515 123) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 5500 6300) (5500 6000 6400) (5700 6200 6500) (5800 6100 6600) (6000 6500 6800) (6100 6400 6800) (6200 6700 7100) (6300 6600 7000) (6400 6800 7100) (6500 6900 7200))) :lonset (quote (0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 23) (om-make-point 590 353) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((9 0 3 1 nil 0) (10 0 4 0 nil 0) (5 0 4 1 nil 0) (2 0 7 0 nil 0) (1 0 7 1 nil 0) (7 0 8 0 nil 0) (9 0 8 1 nil 0) (0 0 10 1 nil 0) (8 0 11 0 nil 0) (4 0 11 2 nil 0) (6 0 11 5 nil 0) (11 0 12 1 nil 0))) nil 7.02))
