; OM File Header - Saved 2023/07/06 16:13:08
; (7.02 :patc (om-make-point 45 445) (om-make-point 50 50) (om-make-point 484 416) "" 183 0 "2023/07/06 16:12:43" "2023/07/06 16:13:04")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "virtual-fundamental" (quote ((let ((box (om-load-boxcall (quote abstraction) "domain" (om-load-patch-abs1 "domain" (quote ((let ((box (om-load-boxout "output" 0 (om-make-point 227 394) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "approx" 1 (om-make-point 378 220) "" "approx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "chord" 0 (om-make-point 292 0) "" "chord" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 177 183) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "A-REAL-BETWEENV" (quote screamer:a-real-betweenv) (quote ((om-load-inputfun (quote input-funbox) "LOW" "LOW" nil) (om-load-inputfun (quote input-funbox) "HIGH" "HIGH" nil))) (om-make-point 159 218) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SORT-LIST" (quote sort-list) (quote ((om-load-inputfun (quote input-funbox) "a list" "LST" nil))) (om-make-point 41 84) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 288 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "MC->F" (quote mc->f) (quote ((om-load-inputfun (quote input-funbox) "pitch or pitch list (midicents)" "MIDICS?" 6000))) (om-make-point 43 230) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 231 318) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST-OF-INTEGERSV" (quote om-screamer::list-of-integersv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil))) (om-make-point 260 216) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 212 145) (om-make-point 30 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (3 0 4 0 nil 0) (10 0 4 1 nil 0) (2 0 5 0 nil 0) (2 0 6 0 nil 0) (5 0 7 0 nil 0) (7 0 8 0 nil 0) (4 0 8 1 nil 0) (9 0 8 2 nil 0) (1 0 8 3 nil 0) (6 0 9 0 nil 0) (7 0 10 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 531/4 1237/8) nil (list (list (list 261.62555 293.66476 369.99442 415.3047 493.8833 554.3653 698.4565 783.99085) nil (list nil nil nil nil nil nil nil nil) 4)) nil "domain"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfun (quote input-funbox) "variable or list" "VARIABLES" nil) (om-load-inputfun (quote input-funbox) "propagation-variables<lambda-patch>" "P-VARIABLES" nil) (om-load-inputfun (quote input-funbox) "constraint<lambda-patch> or list" "CONSTRAINTS" nil) (om-load-inputfun (quote input-funbox) "propagation-constraints<lambda-patch>" "P-CONSTRAINTS" nil) (om-load-inputfunmenu1 (quote input-funmenu) "one-value, all-values, listener, n-values, ith-value or best-value" "SCREAMER-VALUATION" "best-value" (list (list "one-value" "one-value") (list "all-values" "all-values") (list "listener" "listener") (list "n-values" (list (quote list) "n-values" 10)) (list "ith-value" (list (quote list) "ith-value" 10)) (list "best-value" "best-value"))) (om-load-inputfun (quote input-funbox) "ordering-force-functions" "FORCE-FUNCTION" "static-ordering linear-force") (om-load-inputfun (quote input-funbox) "symbol or list" "OUTPUT" (list (list 2) nil)) (om-load-inputfunmenu1 (quote input-funmenu) "symbol t or nil" "COUNT-FAILURES?" nil (list (list "nil" nil) (list "t" (quote t)))) (om-load-inputfun (quote input-funbox) "<lambda-patch>" "OBJECTIVE-FORM" nil))) (om-make-point 199 243) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "objective-form" (om-load-patch-abs1 "objective-form" (quote ((let ((box (om-load-boxin "p-vars" 1 (om-make-point 176 38) "" "p-vars" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 82 120) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 79 286) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "vars" 0 (om-make-point 91 39) "" "vars" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+V" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 90 184) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 1 0 nil 0) (4 0 2 0 nil 0) (1 0 4 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil) (om-load-inputfun (quote input-funbox) "" "input 2" nil))) (om-make-point 336 151) nil (list nil) "l" "objective-form"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 153 113) (om-make-point 27 30) 4 "4" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "FORCE-FUNCTION 2" (quote force-function) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "ordering-force-functions" "FORCE-FUNCTION" "reorder" (list (list "static-ordering linear-force" "static-ordering linear-force") (list "static-ordering divide-and-conquer-force" "static-ordering divide-and-conquer-force") (list "reorder" "reorder"))) (om-load-inputfunmenu1 (quote input-funmenu) "domain-size or range-size" "COST-FUNCTION" "domain-size" (list (list "domain-size" "domain-size") (list "range-size" "range-size"))) (om-load-inputfunmenu1 (quote input-funmenu) "terminate-function" "TERMINATE?" "(< x 1e-6)" (list (list "(declare (ignore x))" "(declare (ignore x))") (list "(< x 1e-6)" "(< x 1e-6)"))) (om-load-inputfunmenu1 (quote input-funmenu) "> or <" "ORDER" ">" (list (list ">" ">") (list "<" "<"))) (om-load-inputfunmenu1 (quote input-funmenu) "linear-force or divide-and-conquer-force" "REORDER-FORCE-FUNCTION" "divide-and-conquer-force" (list (list "linear-force" "linear-force") (list "divide-and-conquer-force" "divide-and-conquer-force"))))) (om-make-point 264 114) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD" (quote chord) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (list of midicents)" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "velocities (list of values 0-127)" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (list of values in ms)" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "durations (list of values in ms)" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "MIDI channels (list of values 0-16)" "lchan" (list 1)))) (om-make-point 68 47) (om-make-point 60 90) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000 6200 6600 6800 7100 7300 7700 7900)) :ldur (quote (1000 1000 1000 1000 1000 1000 1000 1000)) :lvel (quote (100 100 100 100 100 100 100 100)) :loffset (quote (0 0 0 0 0 0 0 0)) :lchan (quote (1 1 1 1 1 1 1 1))))) (load-port-info thechord (quote (0 0 0 0 0 0 0 0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) "x" nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 0 0 (om-make-point 400 23) (om-make-point 576 247) 3 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote gf) 24 8)) t nil nil nil (quote nil)))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "closest-partialsv" (om-load-patch-abs1 "closest-partialsv" (quote ((let ((box (om-load-boxcall (quote abstraction) "closest-partial 2" (om-load-patch-abs1 "closest-partial" (quote ((let ((box (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 403 437) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 396 508) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 544 110) (om-make-point 46 30) 1/12 "1/12" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "* 2" (quote *) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 571 151) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "EXPT 2" (quote expt) (quote ((om-load-inputfun (quote input-funbox) "B" "B" nil) (om-load-inputfun (quote input-funbox) "P" "P" nil))) (om-make-point 560 201) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 520 142) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/" (quote /) (quote ((om-load-inputfun (quote input-funbox) "NUM" "NUM" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 615 93) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=V" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 478 378) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) ">=V" (quote screamer:>=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 354 379) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "approx" 3 (om-make-point 620 5) "" "approx" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "partial" 2 (om-make-point 409 11) "" "partial" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "fund" 1 (om-make-point 281 10) "" "fund" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 395 593) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 4" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 313 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 3" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 252 314) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "/V 2" (quote screamer:/v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 146 253) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*V 2" (quote screamer:*v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 220 255) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 589 58) (om-make-point 27 30) 2 "2" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "nf" 0 (om-make-point 145 13) "" "nf" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((8 0 0 0 nil 0) (7 0 0 1 nil 0) (0 0 1 0 nil 0) (2 0 3 0 nil 0) (6 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 4 1 nil 0) (17 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 7 0 nil 6) (13 0 7 1 nil 1) (10 0 8 0 nil 6) (14 0 8 1 nil 1) (1 0 12 0 nil 0) (16 0 13 0 nil 0) (11 0 13 1 nil 3) (15 0 14 0 nil 0) (11 0 14 1 nil 3) (18 0 15 0 nil 1) (4 0 15 1 nil 2) (18 0 16 0 nil 1) (4 0 16 1 nil 2))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "nf" nil) (om-load-inputfun (quote input-funbox) "" "fund" nil) (om-load-inputfun (quote input-funbox) "" "partial" nil) (om-load-inputfun (quote input-funbox) "" "approx" nil))) (om-make-point 62 288) nil (list nil) "l" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "MAPCARV" (quote screamer+:mapcarv) (quote ((om-load-inputfun (quote input-funbox) "F" "F" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 211 368) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FOURTH" (quote fourth) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 330 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "THIRD" (quote third) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 238 110) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SECOND" (quote second) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 126 109) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FIRST" (quote first) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 40 108) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxout "output" 0 (om-make-point 215 430) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxin "nf-fund-part-appr" 0 (om-make-point 151 4) "" "nf-fund-part-appr" nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 1 nil 0) (2 0 0 3 nil 0) (0 0 1 0 nil 0) (5 0 1 1 nil 0) (3 0 1 2 nil 0) (7 0 2 0 nil 0) (7 0 3 0 nil 0) (7 0 4 0 nil 0) (7 0 5 0 nil 0) (1 0 6 0 nil 0))) 7.02 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "nf-list" nil))) (om-make-point 182 141) nil (list nil) "l" "closest-partialsv"))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 1 0 0 nil 0) (3 0 0 1 nil 0) (0 0 1 0 nil 0) (6 0 1 2 nil 0) (4 0 1 5 nil 0) (2 0 1 8 nil 0))) nil 7.02))
