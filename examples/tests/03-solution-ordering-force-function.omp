; OM File Header - Saved 2024/04/30 12:31:21
; (7.04 :patc (om-make-point 4 266) (om-make-point 30 61) (om-make-point 1149 578) "" 183 0 "2024/04/24 19:54:57" "2024/04/30 12:17:12")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "03-solution-ordering-force-function" (quote ((let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 789/5 1443/5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIVIDE-AND-CONQUER-FORCE" (quote divide-and-conquer-force) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 914/5 21) nil nil "#" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING" (quote static-ordering) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 1054/5 543/5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 344/5 108/5) (om-make-point 91 30) (list 0 1 2 3 4 5) "(0 1 2 3 4 5)" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLUTION" (quote solution) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "ordering force function" "FORCE-FUNCTION" nil))) (om-make-point 794/5 1003/5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "A-MEMBER-OFV" (quote screamer:a-member-ofv) (quote ((om-load-inputfun (quote input-funbox) "VALUES" "VALUES" nil))) (om-make-point 519/5 703/5) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 3367/6 941/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING 2" (quote static-ordering) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 3577/6 440/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLUTION 2" (quote solution) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "ordering force function" "FORCE-FUNCTION" nil))) (om-make-point 3265/6 716/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AN-INTEGER-BETWEENV" (quote screamer:an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "LOW" "LOW" nil) (om-load-inputfun (quote input-funbox) "HIGH" "HIGH" nil))) (om-make-point 2659/6 515/3) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 2701/6 380/3) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 3121/6 398/3) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE" (quote linear-force) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 3637/6 200/3) nil nil "#" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ALL-VALUES" (quote all-values) (quote ((om-load-inputfun (quote input-funbox) "expressions" "EXPRESSIONS" nil))) (om-make-point 7594/9 317) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote abstraction) "lambda-fn-terminate?" (om-load-lisp-abspatch "lambda-fn-terminate?" 7.04 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (x) (declare (ignore x)) nil)") (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 7828/9 54) nil (list nil) "l" "lambda-fn-terminate?"))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 7153/9 128) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 6721/9 129) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AN-INTEGER-BETWEENV 2" (quote screamer:an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "LOW" "LOW" nil) (om-load-inputfun (quote input-funbox) "HIGH" "HIGH" nil))) (om-make-point 6460/9 167) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLUTION 3" (quote solution) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "ordering force function" "FORCE-FUNCTION" nil))) (om-make-point 7369/9 234) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REORDER" (quote reorder) (quote ((om-load-inputfun (quote input-funbox) "cost-function" "COST-FUNCTION" nil) (om-load-inputfun (quote input-funbox) "terminate?" "TERMINATE?" nil) (om-load-inputfun (quote input-funbox) "order" "ORDER" nil) (om-load-inputfun (quote input-funbox) "force-function" "FORCE-FUNCTION" nil))) (om-make-point 8206/9 146) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DOMAIN-SIZE" (quote domain-size) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 7423/9 28) nil nil "#" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "ORDER" (quote order) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "string" "SYMB-FN" (quote >) (list (list ">" (quote (quote >))) (list "<" (quote (quote <))))))) (om-make-point 8944/9 33) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE 2" (quote linear-force) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 9277/9 53) nil nil "#" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 0 0 nil 0) (1 0 2 0 nil 0) (5 0 4 0 nil 0) (2 0 4 1 nil 0) (3 0 5 0 nil 0) (8 0 6 0 nil 0) (12 0 7 0 nil 0) (9 0 8 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (11 0 9 1 nil 0) (18 0 13 0 nil 0) (16 0 17 0 nil 0) (15 0 17 1 nil 0) (17 0 18 0 nil 0) (19 0 18 1 nil 0) (20 0 19 0 nil 0) (14 0 19 1 nil 0) (21 0 19 2 nil 0) (22 0 19 3 nil 0))) nil 7.04))
