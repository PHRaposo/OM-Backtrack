; OM File Header - Saved 2024/04/30 12:31:21
; (7.04 :patc (om-make-point 61 465) (om-make-point 50 50) (om-make-point 1083 645) "" 183 0 "2024/04/29 22:32:48" "2024/04/30 12:30:14")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Backtrack")))(setf *om-current-persistent* (om-load-patch1 "06-best-value" (quote ((let ((box (om-load-boxcomment "comment" (om-make-point 452 30) (quote "EXAMPLE FROM https://www.cuemath.com/algebra/objective-function/ ") "" (om-make-point 275 4) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "BEST-VALUE" (quote best-value) (quote ((om-load-inputfun (quote input-funbox) "integer" "FORM1" nil) (om-load-inputfun (quote input-funbox) "forms" "OBJECTIVE-FORM" nil))) (om-make-point 11665/24 4299/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE" (quote linear-force) (quote ((om-load-inputfun (quote input-funbox) "variable" "VARIABLE" nil))) (om-make-point 10057/24 2275/8) nil nil "#" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING" (quote static-ordering) (quote ((om-load-inputfun (quote input-funbox) "force function" "FORCE-FUNCTION" nil))) (om-make-point 7993/24 2899/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "SOLUTION 2" (quote solution) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "ordering force function" "FORCE-FUNCTION" nil))) (om-make-point 7177/24 3635/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 8665/24 2347/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-seqbox "SEQUENCE" (quote sequence) (quote ((om-load-inputfun (quote input-funbox) "something" "PATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil) (om-load-inputfun (quote input-funbox) "more things" "OPPATCH" nil))) (om-make-point 4585/24 2971/8) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+V 3" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14137/24 2067/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 15217/24 1203/8) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*V 3" (quote screamer:*v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 14545/24 1571/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 13657/24 1219/8) (om-make-point 41 30) 300 "300" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*V 2" (quote screamer:*v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 13201/24 1523/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 5929/24 1243/8) (om-make-point 34 30) 60 "60" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+V 2" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 5017/24 1083/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=V 2" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 5017/24 1515/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT! 2" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 4801/24 2443/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 3769/24 1667/8) (om-make-point 41 30) 100 "100" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 2641/24 811/8) (om-make-point 27 30) 5 "5" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "*V" (quote screamer:*v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 2281/24 1043/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "+V" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 2641/24 1507/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "<=V" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 3169/24 2003/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "ASSERT!" (quote screamer:assert!) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 2953/24 2483/8) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AN-INTEGER-ABOVEV 2" (quote screamer:an-integer-abovev) (quote ((om-load-inputfun (quote input-funbox) "LOW" "LOW" nil))) (om-make-point 10321/24 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 8881/24 46) (om-make-point 27 30) 1 "1" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "AN-INTEGER-ABOVEV" (quote screamer:an-integer-abovev) (quote ((om-load-inputfun (quote input-funbox) "LOW" "LOW" nil))) (om-make-point 5833/24 80) nil nil "&" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((4 0 1 0 nil 0) (7 0 1 1 nil 0) (2 0 3 0 nil 0) (6 2 4 0 nil 0) (3 0 4 1 nil 0) (24 0 5 0 nil 1) (22 0 5 1 nil 2) (21 0 6 0 nil 0) (15 0 6 1 nil 0) (5 0 6 2 nil 0) (11 0 7 0 nil 0) (9 0 7 1 nil 0) (22 0 9 0 nil 2) (8 0 9 1 nil 0) (24 0 11 0 nil 1) (10 0 11 1 nil 0) (24 0 13 0 nil 1) (22 0 13 1 nil 2) (13 0 14 0 nil 0) (12 0 14 1 nil 0) (14 0 15 0 nil 0) (24 0 18 0 nil 1) (17 0 18 1 nil 0) (18 0 19 0 nil 0) (22 0 19 1 nil 2) (19 0 20 0 nil 0) (16 0 20 1 nil 0) (20 0 21 0 nil 0) (23 0 22 0 nil 0) (23 0 24 0 nil 0))) nil 7.04))
