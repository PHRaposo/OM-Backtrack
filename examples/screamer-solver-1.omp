; OM File Header - Saved 2023/05/15 23:13:47
; (7.02 :patc (om-make-point 171 28) (om-make-point 299 27) (om-make-point 1022 679) "" 183 0 "2023/05/15 10:12:45" "2023/05/15 23:13:47")
; End File Header
(in-package :om)(load-lib-for (quote ("OM-Screamer")))(setf *om-current-persistent* (om-load-patch1 "screamer-solver-1" (quote ((let ((box (om-load-boxcall (quote genfun) "SCREAMER-SOLVER" (quote screamer-solver) (quote ((om-load-inputfunmenu1 (quote input-funmenu) "screamer-valuation-mode" "SCREAMER-VAL" 0 (list (list "One-value" 0) (list "All-values" 1) (list "Listener" 2))) (om-load-inputfun (quote input-funbox) "variable" "CONST" nil))) (om-make-point 33 212) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT-ONCE 3" (quote flat-once) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 800 292) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT-ONCE 2" (quote flat-once) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 624 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "FLAT-ONCE" (quote flat-once) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 286 602) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRANSLATE-CSP-2 4" (quote translate-csp-2) (quote ((om-load-inputfun (quote input-funbox) "EXPR" "EXPR" nil) (om-load-inputfun (quote input-funbox) "ORDERING" "ORDERING" nil) (om-load-inputfun (quote input-funbox) "FORCE-FUNCTION" "FORCE-FUNCTION" nil))) (om-make-point 656 242) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING 5" (quote static-ordering) (quote nil) (om-make-point 709 169) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE 5" (quote linear-force) (quote nil) (om-make-point 781 189) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ALL 5" (quote solve-csp-all) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 712 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ONE 5" (quote solve-csp-one) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 616 295) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEENV 6" (quote an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "" "N1" nil) (om-load-inputfun (quote input-funbox) "" "N2" nil))) (om-make-point 594 99) (om-make-point 124 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 15" (quote t) (quote nil) (om-make-point 661 54) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 14" (quote t) (quote nil) (om-make-point 623 53) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) ">V 3" (quote >v) (quote ((om-load-inputfun (quote input-funbox) "" "VAR" nil) (om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil) (om-load-inputfun (quote input-funbox) "" "VARS" nil))) (om-make-point 605 165) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRANSLATE-CSP-2 3" (quote translate-csp-2) (quote ((om-load-inputfun (quote input-funbox) "EXPR" "EXPR" nil) (om-load-inputfun (quote input-funbox) "ORDERING" "ORDERING" nil) (om-load-inputfun (quote input-funbox) "FORCE-FUNCTION" "FORCE-FUNCTION" nil))) (om-make-point 776 560) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING 4" (quote static-ordering) (quote nil) (om-make-point 829 487) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE 4" (quote linear-force) (quote nil) (om-make-point 901 507) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ALL 4" (quote solve-csp-all) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 834 611) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ONE 4" (quote solve-csp-one) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 736 611) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEENV 2" (quote an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "" "N1" nil) (om-load-inputfun (quote input-funbox) "" "N2" nil))) (om-make-point 720 447) (om-make-point 124 35) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 787 416) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 749 415) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) ">V" (quote >v) (quote ((om-load-inputfun (quote input-funbox) "" "VAR" nil) (om-load-inputfun (quote input-funbox) "" "ARG" nil))) (om-make-point 768 514) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 11" (quote t) (quote nil) (om-make-point 95 385) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 10" (quote t) (quote nil) (om-make-point 133 387) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEENV 4" (quote an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "" "N1" nil) (om-load-inputfun (quote input-funbox) "" "N2" nil))) (om-make-point 66 420) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) ">V 4" (quote >v) (quote ((om-load-inputfun (quote input-funbox) "" "ARG" nil) (om-load-inputfun (quote input-funbox) "" "VAR" nil))) (om-make-point 60 466) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 36 417) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ONE 3" (quote solve-csp-one) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 77 606) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ALL 3" (quote solve-csp-all) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 189 605) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE 3" (quote linear-force) (quote nil) (om-make-point 223 471) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING 3" (quote static-ordering) (quote nil) (om-make-point 127 470) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRANSLATE-CSP-2 2" (quote translate-csp-2) (quote ((om-load-inputfun (quote input-funbox) "EXPR" "EXPR" nil) (om-load-inputfun (quote input-funbox) "ORDERING" "ORDERING" nil) (om-load-inputfun (quote input-funbox) "FORCE-FUNCTION" "FORCE-FUNCTION" nil))) (om-make-point 123 535) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) ">V 2" (quote >v) (quote ((om-load-inputfun (quote input-funbox) "" "VAR" nil) (om-load-inputfun (quote input-funbox) "" "ARG" nil))) (om-make-point 456 495) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 373 395) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 411 397) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEENV 3" (quote an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "" "N1" nil) (om-load-inputfun (quote input-funbox) "" "N2" nil))) (om-make-point 344 427) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 480 436) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ONE 2" (quote solve-csp-one) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 446 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ALL 2" (quote solve-csp-all) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 537 610) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE 2" (quote linear-force) (quote nil) (om-make-point 578 483) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING 2" (quote static-ordering) (quote nil) (om-make-point 486 480) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRANSLATE-CSP-2" (quote translate-csp-2) (quote ((om-load-inputfun (quote input-funbox) "EXPR" "EXPR" nil) (om-load-inputfun (quote input-funbox) "ORDERING" "ORDERING" nil) (om-load-inputfun (quote input-funbox) "FORCE-FUNCTION" "FORCE-FUNCTION" nil))) (om-make-point 482 555) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "list" (quote list) (quote nil) (om-make-point 176 40) (om-make-point 54 30) (quote (quote screamer:>v)) "'s::>v" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "REORDER" (quote reorder) (quote nil) (om-make-point 904 25) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 236 41) (om-make-point 27 30) 7 "7" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "AN-INTEGER-BETWEENV" (quote an-integer-betweenv) (quote ((om-load-inputfun (quote input-funbox) "" "N1" nil) (om-load-inputfun (quote input-funbox) "" "N2" nil))) (om-make-point 45 35) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LINEAR-FORCE" (quote linear-force) (quote nil) (om-make-point 366 32) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "DIVIDE-AND-CONQUER-FORCE" (quote divide-and-conquer-force) (quote nil) (om-make-point 851 79) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "STATIC-ORDERING" (quote static-ordering) (quote nil) (om-make-point 281 31) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "TRANSLATE-CSP-TEST" (quote translate-csp-test) (quote ((om-load-inputfun (quote input-funbox) "VARS" "VARS" nil) (om-load-inputfun (quote input-funbox) "CONSTRAINTES" "CONSTRAINTES" nil) (om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "ORDERING" "ORDERING" nil) (om-load-inputfun (quote input-funbox) "FORCE-FUNCTION" "FORCE-FUNCTION" nil))) (om-make-point 107 88) (om-make-point 284 43) nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ONE" (quote solve-csp-one) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 149 148) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "SOLVE-CSP-ALL" (quote solve-csp-all) (quote ((om-load-inputfun (quote input-funbox) "EXP" "EXP" nil))) (om-make-point 253 150) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 112 5) (om-make-point 34 30) 10 "10" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 3) (om-make-point 27 30) 0 "0" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((7 0 1 0 nil 0) (38 0 2 0 nil 0) (28 0 3 0 nil 0) (12 0 4 0 nil 0) (5 0 4 1 nil 0) (6 0 4 2 nil 0) (4 0 7 0 nil 0) (4 0 8 0 nil 0) (11 0 9 0 nil 0) (10 0 9 1 nil 0) (9 0 12 0 nil 0) (9 0 12 1 nil 0) (9 0 12 2 nil 0) (9 0 12 3 nil 0) (9 0 12 4 nil 0) (9 0 12 5 nil 0) (9 0 12 6 nil 0) (9 0 12 7 nil 0) (9 0 12 8 nil 0) (9 0 12 9 nil 0) (21 0 13 0 nil 0) (14 0 13 1 nil 0) (15 0 13 2 nil 0) (13 0 16 0 nil 0) (13 0 17 0 nil 0) (20 0 18 0 nil 0) (19 0 18 1 nil 0) (18 0 21 0 nil 0) (18 0 21 1 nil 0) (22 0 24 0 nil 0) (23 0 24 1 nil 0) (26 0 25 0 nil 0) (24 0 25 1 nil 0) (31 0 27 0 nil 0) (31 0 28 0 nil 0) (25 0 31 0 nil 0) (30 0 31 1 nil 0) (29 0 31 2 nil 0) (35 0 32 0 nil 0) (36 0 32 1 nil 0) (33 0 35 0 nil 0) (34 0 35 1 nil 0) (41 0 37 0 nil 0) (41 0 38 0 nil 0) (32 0 41 0 nil 0) (40 0 41 1 nil 0) (39 0 41 2 nil 0) (53 0 45 0 nil 0) (52 0 45 1 nil 0) (45 0 49 0 nil 0) (42 0 49 1 nil 0) (44 0 49 2 nil 0) (48 0 49 3 nil 0) (46 0 49 4 nil 0) (49 0 50 0 nil 0) (49 0 51 0 nil 0))) nil 7.02))